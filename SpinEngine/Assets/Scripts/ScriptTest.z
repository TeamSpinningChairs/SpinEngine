class ZilchTest : ZilchComponent
{
	var Butts:Integer = 8;
	var Sequence:ActionSequence = null;
	var Group:ActionGroup = null;
	constructor():base()
	{
		Console.WriteLine("I AM THE ZILCH CONSTRUCTOR!");
	}
	
	function Initialize()
	{
		Console.WriteLine("INITIALIZED");
		//Console.WriteLine(this.Butts);
        //var obj = ZInterface.FindObjectByName("MainPlayer");
        //Console.WriteLine(obj.GetName());
        //obj.Transform.Translation.X += 1;
		var seq = Action.Sequence(@this.Owner.Actions);
		var grp = Action.Group(seq);
		Action.Property(grp, this.Owner.Transform.Rotation, Vector3D(0, 0, 970), 3, 3);
		var trans = this.Owner.Transform.Translation;
		var newPos = Vector3D(trans.X + 10, trans.Y + 10,0);
		Action.Call(seq, this.Test);
		Action.Property(grp, this.Owner.Transform.Translation, newPos, 3, 2);
		Action.Property(grp, this.Owner.Transform.Scale, Vector3D(2, 0.5, 0.5), 3, 3);
		var grp2 = Action.Group(seq);
		newPos.X -= 20;
		Action.Property(seq, this.Owner.Transform.Translation, newPos, 3, Eases.QntInOut);
		newPos.Y + 15;
		newPos.X + 3;
		Action.Property(seq, this.Owner.Transform.Translation, newPos, 3, Eases.QntInOut);
		//Console.WriteLine(this.Owner.ZilchFriend.Pancakes);
		//Action.Sequence(this.Owner.Actions, @Butts, 19, 6, 1);
	}
	
	function Test()
	{
	}
	
	function Update(dt:Real)
	{
		this.Owner.Actions.Update(dt);
        //var obj = ZInterface.FindObjectByName("MainPlayer");
        //Console.WriteLine(obj.GetName());
        //obj.Transform.Translation.X += 0.4;
		//this.Owner.Transform.Translation.X += 2;
		//Console.WriteLine(dt);
		// if(ZInterface.InputManager.IsKeyDown(Keys.D))
		// {
			// this.Owner.Transform.Translation.X += 2 * dt;
			// //Console.WriteLine(transform);
			// //transform.Translation.X += 2 * dt;
			// //Console.WriteLine("LEFT");
			// this.Owner.Visible = !this.Owner.Visible;
		// }
	}
	
	function Destroyed()
	{
		Console.WriteLine("I AM DEAD!");
	}
}

class CameraFollow : ZilchComponent
{
	var Active:Boolean = true;
	var TargetName:String = "Player1";
    var IsOwner:Boolean = true;
    var Zoom:Real = 23;
    var CameraSpeed:Real = 0.014;
    var Target:IEntity = null;
    var Cam:Camera = null;
    
	constructor():base()
	{
	}
	
	function Initialize()
	{
		var seq = Action.Sequence(@this.Owner.Actions);
		Action.Delay(seq, 3);
		Action.Call(seq, this.FunctionTest);
		
        this.Cam = ZInterface.GraphicsManager.GetMainCamera();
        if (this.IsOwner)
        {
            this.Target = this.Owner;
        }
        else
        {
            this.Target = ZInterface.FindObjectByName(this.TargetName);
        }
        if(this.Active)
		{
			var vec = this.Target.Transform.Translation;
			this.Cam.SetPosition(vec);
		}
        this.Cam.SetZoom(this.Zoom);
	}
	
	function FunctionTest()
	{
		Console.WriteLine("TEST WORKED");
	}
	
	function Update(dt:Real)
	{
	
        var pos1 = this.Cam.GetPosition();
        var pos2 = this.Target.Transform.Translation;
        var differenceX = Math.Abs(pos2.X - pos1.X); 
		var differenceY = Math.Abs(pos2.Y - pos1.Y);
		
		var newposX = Math.Lerp(pos1.X, pos2.X, this.CameraSpeed * differenceX);
		var newposY = Math.Lerp(pos1.Y, pos2.Y, this.CameraSpeed * differenceY);
        
        if(ZInterface.InputManager.IsKeyDown(Keys.I))
		{
			this.Cam.SetZoom(this.Cam.GetZoom() + 0.3);
		}
        if(ZInterface.InputManager.IsKeyDown(Keys.O))
		{
			this.Cam.SetZoom(this.Cam.GetZoom() - 0.3);
		}
        this.Cam.SetPosition(newposX, newposY, 0);
	}
	
	function Destroyed()
	{
	}
}

class ZilchController : ZilchComponent
{
	var KeyboardLeft:Keys = Keys.LEFT;
	var Speed:Integer = 10;
	constructor():base()
	{
	}
	
	function Initialize()
	{
		Console.WriteLine(this.KeyboardLeft);
		this.Owner.RigidBody.Static = false;
		this.Owner.RigidBody.Ghost = false;
		this.Owner.RigidBody.Kinematic = true;
		this.Owner.RigidBody.UsesGravity = true;
		this.Owner.RigidBody.Set(0.5);
		var mass = this.Owner.RigidBody.GetMass();
		var trans = this.Owner.Transform.Translation;
		//this.Owner.RigidBody.SetPosition(trans.X, trans.Y);
        Console.WriteLine(mass);
		
		
	}
	
	function Update(dt:Real)
	{
		//this.Owner.Transform.Translation = Vector3D(vec2D.X, vec2D.Y, 0);
		//Console.WriteLine(this.Owner.RigidBody.GetPosition());
        if(ZInterface.InputManager.IsKeyDown(Keys.RIGHT))
		{
			//this.Owner.Transform.Translation.X += this.Speed * dt;
			this.Owner.RigidBody.ApplyForce(Vector2D(5, 0));
			this.Owner.Transform.Scale.X = 1;
		}
        if(ZInterface.InputManager.IsKeyDown(Keys.LEFT) ||
			ZInterface.InputManager.IsTriggerDown(Controller.ONE, ControllerDir.LEFT))
		{
			//this.Owner.Transform.Translation.X -= this.Speed * dt;
			this.Owner.RigidBody.ApplyForce(Vector2D(-5, 0));
			this.Owner.Transform.Scale.X = -1;
		}
		else if(ZInterface.InputManager.IsKeyReleased(Keys.LEFT))
		{
			this.Owner.RigidBody.SetVelocity(Vector2D(-0.1, 0));
			
		}
		if(ZInterface.InputManager.IsKeyPressed(Keys.UP))
		{
			//this.Owner.Transform.Translation.X -= this.Speed * dt;
			var currentvel = this.Owner.RigidBody.GetVelocity();
			this.Owner.RigidBody.SetVelocity(Vector2D(currentvel.X, 20));
		}
	}
	
	function Destroyed()
	{
	}
}

class SpriteChanger : ZilchComponent
{
	var Idle:String = "Player_Idle.png";
	constructor():base()
	{
	}
	
	function Initialize()
	{
		var obj = Utility.CreateGameObject("Bullet", this.Idle, this.Owner.Transform.Translation, Vector4D(255,255,0,255), false);
		var sprite = ZInterface.Factory.CreateSprite(this.Idle);
		sprite.SetStateName("playeridle");
		this.Owner.Sprite.AddSprite(sprite);
		this.Owner.Sprite.ChangeSprite("playeridle");
		
		//EventConnect(this.Owner, Events.PlayerStateChange, this.OnStatePlayerChange);
		
		//var toSend = new ExplosionEvent:EventData();
		//Events.Send(this.Owner, Events.Explosion, toSend);
		//Events.Connect(script.Owner, Events.Any, this.OnSomeEvent);
	}
	
	// function OnStatePlayerChange(e:PlayerStateChange)
	// {
		
	// }
	
	function Update(dt:Real)
	{
		if(ZInterface.InputManager.IsKeyTriggered(Keys.SPACE))
		{
			var obj = Utility.CreateGameObject("Bullet", this.Idle, this.Owner.Transform.Translation, Vector4D(), false);
			//obj.AddGomponent();
		}
		
	}
	
	function Destroyed()
	{
	}
	
	//sends PlayerStateChange:PlayerStateChange;
}


class Rotator : ZilchComponent
{
	var Active:Boolean = true;
	var Speed:Real3 = Real3(0,0,0);
	var UsesDT:Boolean = false;
	
	constructor() : base()
	{
	}
	
	function Initialize()
	{
		//EventSystem.Connect(Events.UpdateEvent, this.LogicUpdate);
	}
	
	function Update(dt:Real)
	{
		if (!this.Active)
		{
			return;
		}
		var rot = this.Speed + ZInterface.VecToReal(this.Owner.Transform.Rotation);
		
		if (this.UsesDT)
		{
			//rot *= ZInterface.Physics.DT;
		}
		
		this.Owner.Transform.Rotation = Vector3D(rot);
		
	}
}

class Parent : ZilchComponent
{
	var ParentName:String = "Core";
	var InheritPosition:Boolean = true;
	var InheritRotation:Boolean = true;
	var InheritScale:Boolean = true;
	var Pivot:Boolean = true;
	var Position:Real3 = Real3();
	
	constructor():base()
	{
	}
	
	function Initialize()
	{
		this.Owner.Transform.Translation = Vector3D(this.Position);
		ZInterface.FindObjectByName(this.ParentName).AddChild(this.Owner);
		this.Owner.InheritPosition = this.InheritPosition;
		this.Owner.InheritRotation = this.InheritRotation;
		this.Owner.InheritScale = this.InheritScale;
		this.Owner.Pivot = this.Pivot;
		
	}
	
	function Update(dt:Real)
	{
	}
	
	function Destroyed()
	{
	}
}

// class PlayerStateChange : EventData
// {
	// constructor():base()
	// {
	// }
// }

class ZilchFriend : ZilchComponent
{
	var Pancakes:String = "POONCOOKS!!";
	constructor():base()
	{
	}
	
	function Initialize()
	{
	}
	
	function Update(dt:Real)
	{
	}
	
	function Destroyed()
	{
	}
}
